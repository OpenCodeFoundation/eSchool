// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public static partial class EschoolClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EschoolClientStoreAccessor> AddEschoolClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EschoolClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.GetEnrollmentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.RegisterStudentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.EschoolClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IEschoolClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EschoolClientStoreAccessor>("EschoolClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("EschoolClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.GetEnrollments_Enrollments_Enrollment>, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.GetEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.RegisterStudent_CreateEnrollment_Enrollment>, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.RegisterStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UuidSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.GetEnrollmentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.GetEnrollmentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.GetEnrollmentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.GetEnrollmentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.RegisterStudentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.RegisterStudentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.RegisterStudentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.RegisterStudentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EschoolClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.EschoolClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IEschoolClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.EschoolClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollmentsResult : global::System.IEquatable<GetEnrollmentsResult>, IGetEnrollmentsResult
    {
        public GetEnrollmentsResult(global::System.Collections.Generic.IReadOnlyList<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollments_Enrollments> enrollments)
        {
            Enrollments = enrollments;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollments_Enrollments> Enrollments { get; }

        public virtual global::System.Boolean Equals(GetEnrollmentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Enrollments, other.Enrollments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetEnrollmentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Enrollments_elm in Enrollments)
                {
                    hash ^= 397 * Enrollments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollments_Enrollments_Enrollment : global::System.IEquatable<GetEnrollments_Enrollments_Enrollment>, IGetEnrollments_Enrollments_Enrollment
    {
        public GetEnrollments_Enrollments_Enrollment(global::System.Guid id, global::System.String? name, global::System.String? emailAddress, global::System.String? mobileNumber)
        {
            Id = id;
            Name = name;
            EmailAddress = emailAddress;
            MobileNumber = mobileNumber;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.String? EmailAddress { get; }

        public global::System.String? MobileNumber { get; }

        public virtual global::System.Boolean Equals(GetEnrollments_Enrollments_Enrollment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((EmailAddress is null && other.EmailAddress is null) || EmailAddress != null && EmailAddress.Equals(other.EmailAddress)) && ((MobileNumber is null && other.MobileNumber is null) || MobileNumber != null && MobileNumber.Equals(other.MobileNumber));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetEnrollments_Enrollments_Enrollment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (EmailAddress != null)
                {
                    hash ^= 397 * EmailAddress.GetHashCode();
                }

                if (MobileNumber != null)
                {
                    hash ^= 397 * MobileNumber.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IGetEnrollmentsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollments_Enrollments> Enrollments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IEnrollmentId
    {
        public global::System.Guid Id { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IEnrollment : IEnrollmentId
    {
        public global::System.String? Name { get; }

        public global::System.String? EmailAddress { get; }

        public global::System.String? MobileNumber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IGetEnrollments_Enrollments : IEnrollment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IGetEnrollments_Enrollments_Enrollment : IGetEnrollments_Enrollments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudentResult : global::System.IEquatable<RegisterStudentResult>, IRegisterStudentResult
    {
        public RegisterStudentResult(global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudent_CreateEnrollment createEnrollment)
        {
            CreateEnrollment = createEnrollment;
        }

        public global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudent_CreateEnrollment CreateEnrollment { get; }

        public virtual global::System.Boolean Equals(RegisterStudentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreateEnrollment.Equals(other.CreateEnrollment));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterStudentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreateEnrollment.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudent_CreateEnrollment_Enrollment : global::System.IEquatable<RegisterStudent_CreateEnrollment_Enrollment>, IRegisterStudent_CreateEnrollment_Enrollment
    {
        public RegisterStudent_CreateEnrollment_Enrollment(global::System.Guid id)
        {
            Id = id;
        }

        public global::System.Guid Id { get; }

        public virtual global::System.Boolean Equals(RegisterStudent_CreateEnrollment_Enrollment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((RegisterStudent_CreateEnrollment_Enrollment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IRegisterStudentResult
    {
        public global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudent_CreateEnrollment CreateEnrollment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IRegisterStudent_CreateEnrollment : IEnrollmentId
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IRegisterStudent_CreateEnrollment_Enrollment : IRegisterStudent_CreateEnrollment
    {
    }

    /// <summary>
    /// Represents the operation service of the GetEnrollments GraphQL operation
    /// <code>
    /// query GetEnrollments {
    ///   enrollments {
    ///     __typename
    ///     ... enrollment
    ///     ... on Enrollment {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment enrollment on Enrollment {
    ///   ... enrollmentId
    ///   name
    ///   emailAddress
    ///   mobileNumber
    /// }
    /// 
    /// fragment enrollmentId on Enrollment {
    ///   id
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollmentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetEnrollmentsQueryDocument()
        {
        }

        public static GetEnrollmentsQueryDocument Instance { get; } = new GetEnrollmentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a50421f0381ef4f592b464dfb3ba2995");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetEnrollments GraphQL operation
    /// <code>
    /// query GetEnrollments {
    ///   enrollments {
    ///     __typename
    ///     ... enrollment
    ///     ... on Enrollment {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment enrollment on Enrollment {
    ///   ... enrollmentId
    ///   name
    ///   emailAddress
    ///   mobileNumber
    /// }
    /// 
    /// fragment enrollmentId on Enrollment {
    ///   id
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollmentsQuery : global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetEnrollmentsResult> _operationExecutor;
        public GetEnrollmentsQuery(global::StrawberryShake.IOperationExecutor<IGetEnrollmentsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetEnrollmentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetEnrollmentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetEnrollmentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetEnrollmentsQueryDocument.Instance.Hash.Value, name: "GetEnrollments", document: GetEnrollmentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetEnrollments GraphQL operation
    /// <code>
    /// query GetEnrollments {
    ///   enrollments {
    ///     __typename
    ///     ... enrollment
    ///     ... on Enrollment {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment enrollment on Enrollment {
    ///   ... enrollmentId
    ///   name
    ///   emailAddress
    ///   mobileNumber
    /// }
    /// 
    /// fragment enrollmentId on Enrollment {
    ///   id
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IGetEnrollmentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetEnrollmentsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetEnrollmentsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the RegisterStudent GraphQL operation
    /// <code>
    /// mutation RegisterStudent($fullName: String!, $email: String!, $mobile: String!) {
    ///   createEnrollment(enrollment: { name: $fullName, email: $email, mobile: $mobile }) {
    ///     __typename
    ///     ... enrollmentId
    ///     ... on Enrollment {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment enrollmentId on Enrollment {
    ///   id
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudentMutationDocument : global::StrawberryShake.IDocument
    {
        private RegisterStudentMutationDocument()
        {
        }

        public static RegisterStudentMutationDocument Instance { get; } = new RegisterStudentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x7b, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x3a, 0x20, 0x24, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2c, 0x20, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x3a, 0x20, 0x24, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "2932c33abb46a61918b2df0ea32cc158");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the RegisterStudent GraphQL operation
    /// <code>
    /// mutation RegisterStudent($fullName: String!, $email: String!, $mobile: String!) {
    ///   createEnrollment(enrollment: { name: $fullName, email: $email, mobile: $mobile }) {
    ///     __typename
    ///     ... enrollmentId
    ///     ... on Enrollment {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment enrollmentId on Enrollment {
    ///   id
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudentMutation : global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IRegisterStudentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public RegisterStudentMutation(global::StrawberryShake.IOperationExecutor<IRegisterStudentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IRegisterStudentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterStudentResult>> ExecuteAsync(global::System.String fullName, global::System.String email, global::System.String mobile, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(fullName, email, mobile);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterStudentResult>> Watch(global::System.String fullName, global::System.String email, global::System.String mobile, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(fullName, email, mobile);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String fullName, global::System.String email, global::System.String mobile)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("fullName", FormatFullName(fullName));
            variables.Add("email", FormatEmail(email));
            variables.Add("mobile", FormatMobile(mobile));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: RegisterStudentMutationDocument.Instance.Hash.Value, name: "RegisterStudent", document: RegisterStudentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFullName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatEmail(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatMobile(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the RegisterStudent GraphQL operation
    /// <code>
    /// mutation RegisterStudent($fullName: String!, $email: String!, $mobile: String!) {
    ///   createEnrollment(enrollment: { name: $fullName, email: $email, mobile: $mobile }) {
    ///     __typename
    ///     ... enrollmentId
    ///     ... on Enrollment {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment enrollmentId on Enrollment {
    ///   id
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IRegisterStudentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IRegisterStudentResult>> ExecuteAsync(global::System.String fullName, global::System.String email, global::System.String mobile, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IRegisterStudentResult>> Watch(global::System.String fullName, global::System.String email, global::System.String mobile, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the EschoolClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class EschoolClient : global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IEschoolClient
    {
        private readonly global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery _getEnrollments;
        private readonly global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation _registerStudent;
        public EschoolClient(global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery getEnrollments, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation registerStudent)
        {
            _getEnrollments = getEnrollments ?? throw new global::System.ArgumentNullException(nameof(getEnrollments));
            _registerStudent = registerStudent ?? throw new global::System.ArgumentNullException(nameof(registerStudent));
        }

        public static global::System.String ClientName => "EschoolClient";
        public global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery GetEnrollments => _getEnrollments;
        public global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation RegisterStudent => _registerStudent;
    }

    /// <summary>
    /// Represents the EschoolClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public interface IEschoolClient
    {
        global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsQuery GetEnrollments { get; }

        global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentMutation RegisterStudent { get; }
    }
}

namespace OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class EnrollmentEntity
    {
        public EnrollmentEntity(global::System.Guid id = default !, global::System.String? name = default !, global::System.String? emailAddress = default !, global::System.String? mobileNumber = default !)
        {
            Id = id;
            Name = name;
            EmailAddress = emailAddress;
            MobileNumber = mobileNumber;
        }

        public global::System.Guid Id { get; }

        public global::System.String? Name { get; }

        public global::System.String? EmailAddress { get; }

        public global::System.String? MobileNumber { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollmentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.GetEnrollmentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, GetEnrollments_Enrollments_Enrollment> _getEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper;
        public GetEnrollmentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, GetEnrollments_Enrollments_Enrollment> getEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper = getEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult);
        public GetEnrollmentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetEnrollmentsResultInfo info)
            {
                return new GetEnrollmentsResult(MapNonNullableIGetEnrollments_EnrollmentsNonNullableArray(info.Enrollments, snapshot));
            }

            throw new global::System.ArgumentException("GetEnrollmentsResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollments_Enrollments> MapNonNullableIGetEnrollments_EnrollmentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var enrollments = new global::System.Collections.Generic.List<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollments_Enrollments>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                enrollments.Add(MapNonNullableIGetEnrollments_Enrollments(child, snapshot));
            }

            return enrollments;
        }

        private global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollments_Enrollments MapNonNullableIGetEnrollments_Enrollments(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Enrollment", global::System.StringComparison.Ordinal))
            {
                return _getEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper.Map(snapshot.GetEntity<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollmentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetEnrollmentsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> enrollments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Enrollments = enrollments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> Enrollments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetEnrollmentsResultInfo(Enrollments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper : global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, GetEnrollments_Enrollments_Enrollment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetEnrollments_Enrollments_EnrollmentFromEnrollmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetEnrollments_Enrollments_Enrollment Map(global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetEnrollments_Enrollments_Enrollment(entity.Id, entity.Name, entity.EmailAddress, entity.MobileNumber);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.RegisterStudentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, RegisterStudent_CreateEnrollment_Enrollment> _registerStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper;
        public RegisterStudentResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, RegisterStudent_CreateEnrollment_Enrollment> registerStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _registerStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper = registerStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(registerStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult);
        public RegisterStudentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is RegisterStudentResultInfo info)
            {
                return new RegisterStudentResult(MapNonNullableIRegisterStudent_CreateEnrollment(info.CreateEnrollment, snapshot));
            }

            throw new global::System.ArgumentException("RegisterStudentResultInfo expected.");
        }

        private global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudent_CreateEnrollment MapNonNullableIRegisterStudent_CreateEnrollment(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Enrollment", global::System.StringComparison.Ordinal))
            {
                return _registerStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper.Map(snapshot.GetEntity<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public RegisterStudentResultInfo(global::StrawberryShake.EntityId createEnrollment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CreateEnrollment = createEnrollment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId CreateEnrollment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new RegisterStudentResultInfo(CreateEnrollment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper : global::StrawberryShake.IEntityMapper<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity, RegisterStudent_CreateEnrollment_Enrollment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public RegisterStudent_CreateEnrollment_EnrollmentFromEnrollmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public RegisterStudent_CreateEnrollment_Enrollment Map(global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new RegisterStudent_CreateEnrollment_Enrollment(entity.Id);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class GetEnrollmentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uuidParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetEnrollmentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IGetEnrollmentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("Uuid") ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetEnrollmentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetEnrollmentsResult Result, GetEnrollmentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IGetEnrollmentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetEnrollmentsResult, GetEnrollmentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> enrollmentsId = default !;
            _entityStore.Update(session =>
            {
                enrollmentsId = UpdateNonNullableIGetEnrollments_EnrollmentsEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enrollments"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetEnrollmentsResultInfo(enrollmentsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetEnrollments_EnrollmentsEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var enrollments = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                enrollments.Add(UpdateNonNullableIGetEnrollments_EnrollmentsEntity(session, child, entityIds));
            }

            return enrollments;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetEnrollments_EnrollmentsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Enrollment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "emailAddress")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mobileNumber"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "emailAddress")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mobileNumber"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class RegisterStudentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uuidParser;
        public RegisterStudentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.IRegisterStudentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uuidParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("Uuid") ?? throw new global::System.ArgumentException("No serializer for type `Uuid` found.");
        }

        public global::StrawberryShake.IOperationResult<IRegisterStudentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IRegisterStudentResult Result, RegisterStudentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
            }

            return new global::StrawberryShake.OperationResult<IRegisterStudentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IRegisterStudentResult, RegisterStudentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId createEnrollmentId = default !;
            _entityStore.Update(session =>
            {
                createEnrollmentId = UpdateNonNullableIRegisterStudent_CreateEnrollmentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createEnrollment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new RegisterStudentResultInfo(createEnrollmentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIRegisterStudent_CreateEnrollmentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Enrollment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), entity.Name, entity.EmailAddress, entity.MobileNumber));
                }
                else
                {
                    session.SetEntity(entityId, new global::OpenCodeFoundation.ESchool.Web.Frontend.Blazor.Client.State.EnrollmentEntity(DeserializeNonNullableGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid DeserializeNonNullableGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uuidParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class EschoolClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Enrollment" => ParseEnrollmentEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Enrollment" => FormatEnrollmentEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseEnrollmentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatEnrollmentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.3.2.0")]
    public partial class EschoolClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public EschoolClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
